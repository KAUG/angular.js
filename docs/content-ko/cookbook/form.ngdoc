@ngdoc overview
@name Cookbook: 폼양식(Form)
@description

웹 어플리케이션(web application)의 주 목적은 데이터를 제공하고 수집하는데 있습니다. 이런 이유에서 Angular는 데이터를 제공하고 수집하는 두 일들을 신경쓸
필요가 없게 만들려고 노력하고 있습니다. 이 예제는 사용자가 데이터를 입력하도록 하는 간단한 폼양식을 만들수 있도록 보여줍니다.


<doc:example>
 <doc:source>
  <script>
    function FormController($scope) {
      var user = $scope.user = {
        name: 'John Smith',
        address:{line1: '123 Main St.', city:'Anytown', state:'AA', zip:'12345'},
        contacts:[{type:'phone', value:'1(234) 555-1212'}]
      };
      $scope.state = /^\w\w$/;
      $scope.zip = /^\d\d\d\d\d$/;

      $scope.addContact = function() {
         user.contacts.push({type:'email', value:''});
      };

      $scope.removeContact = function(contact) {
        for (var i = 0, ii = user.contacts.length; i < ii; i++) {
          if (contact === user.contacts[i]) {
            $scope.user.contacts.splice(i, 1);
          }
        }
      };
    }
  </script>
  <div ng-controller="FormController" class="example">

    <label>Name:</label><br>
    <input type="text" ng-model="user.name" required/> <br><br>

    <label>Address:</label><br>
    <input type="text" ng-model="user.address.line1" size="33" required> <br>
    <input type="text" ng-model="user.address.city" size="12" required>,
    <input type="text" ng-model="user.address.state"
           ng-pattern="state" size="2" required>
    <input type="text" ng-model="user.address.zip" size="5"
           ng-pattern="zip" required><br><br>

    <label>Phone:</label>
    [ <a href="" ng-click="addContact()">add</a> ]
    <div ng-repeat="contact in user.contacts">
      <select ng-model="contact.type">
        <option>email</option>
        <option>phone</option>
        <option>pager</option>
        <option>IM</option>
      </select>
      <input type="text" ng-model="contact.value" required>
       [ <a href="" ng-click="removeContact(contact)">X</a> ]
    </div>
    <hr/>
    Debug View:
    <pre>user={{user | json}}</pre>
  </div>

 </doc:source>
 <doc:scenario>
  it('should show debug', function() {
    expect(binding('user')).toMatch(/John Smith/);
  });
  it('should add contact', function() {
    using('.example').element('a:contains(add)').click();
    using('.example div:last').input('contact.value').enter('you@example.org');
    expect(binding('user')).toMatch(/\(234\) 555\-1212/);
    expect(binding('user')).toMatch(/you@example.org/);
  });

  it('should remove contact', function() {
    using('.example').element('a:contains(X)').click();
    expect(binding('user')).not().toMatch(/\(234\) 555\-1212/);
  });

  it('should validate zip', function() {
    expect(using('.example').
      element(':input[ng\\:model="user.address.zip"]').
      prop('className')).not().toMatch(/ng-invalid/);
    using('.example').input('user.address.zip').enter('abc');
    expect(using('.example').
      element(':input[ng\\:model="user.address.zip"]').
      prop('className')).toMatch(/ng-invalid/);
  });

  it('should validate state', function() {
    expect(using('.example').element(':input[ng\\:model="user.address.state"]').prop('className'))
      .not().toMatch(/ng-invalid/);
    using('.example').input('user.address.state').enter('XXX');
    expect(using('.example').element(':input[ng\\:model="user.address.state"]').prop('className'))
      .toMatch(/ng-invalid/);
  });
 </doc:scenario>
</doc:example>


# 알아두어야 할 사항들

* 사용자 데이터 모델은 초기화 됩니다 {@link api/ng.directive:ngController 컨트롤러(controller)} 그리고 초기값과 함께 {@link api/ng.$rootScope.Scope 스콥(scope)}
에서 접근 가능하게 됩니다.
* 디버그 목적으로 어떻게 진행되고 있는지 좀 더 잘 이해할 수 있도록 모델의 디버그 뷰를 추가하였습니다.
* {@link api/ng.directive:input input 지시자(directives)}는 단순히 모델을 참조하는 데이터결속체(data-bound) 입니다.
* 입력값 유효화하기 ( 빈칸으로 남겨두도록 하거나 또는 zip필드(field)에 숫자가 입력되지 않도록 하십시오)
* 어플리케이션 안에서는 모델을 단순히 읽고 쓸 수 있으며, 폼양식은 (자동으로) 업데이트 될 것입니다.
* 'add'링크를 클릭하면 user.contacts 배열(array)에 새로운 아이템을 추가하게 되고 뷰에 반영되게 됩니다.