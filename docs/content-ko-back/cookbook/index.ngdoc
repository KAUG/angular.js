@ngdoc overview
@name Cookbook
@description

Angular cookbook에 오신 것을 환영합니다. 이제 Angular의 일반적인 사용을 예를 이용하여 보여드리겠습니다.
Welcome to the Angular cookbook. Here we will show you typical uses of Angular by example.


# Hello World

{@link helloworld Hello World}: 클래식한 Hello World!를 보여드리는 가능한 가장 간단한 어플리케이션.


# 기본 폼 양식(Basic Form)

{@link form Basic Form}: 사용자가 수정을 할 수 있도록 폼양식을 보여주는 것은 웹 어플리케이션의 가장 기본이다. Angular는 양방향 데이터 바인딩을 이용하여
폼양식을 쉽게 만듭니다.


# 진보된 폼양식(Advanced Form)

{@link advancedform Advanced Form}: 폼양식 예제를 다음 단계로 이끌고, 수정사항 인식, 폼 되돌리기, 그리고 변수에 에러(error)가 존재할 경우 제출을
불가능하게 하는 등의 고급 기능을 제공하기.


# 모델 뷰 컨트롤러(MVC- Model View Controller)
# Model View Controller

{@link mvc MVC}: 틱-택-토(Tic-Tac-Toe): MVC는 보여주는 것(HTML view)으로부터 행동(behavior - Javascript controller)를 구분하는 오랜시간
효용성이 검증된 디자인 패턴입니다. 이 두의 구분은 당신의 프로젝트의 보존성과 테스트가능성에 대해 도움을 줍니다.


# 다중 페이지 앱과 딥 링킹(deep linking)

{@link deeplinking Deep Linking}: AJAX 어플리케이션은 처음 로딩한 페이지를 떠나지 않습니다. 대신, 단일 페이지의 DOM을 변경합니다. 전체 페이지
재로딩(reload)를 제거하는 것은 AJAX 앱을 반응하도록 합니다. 그러나 이는 단일 URL의 앱이 어플리케이션 내의 특정 화면으로 이메일링크를 보내지 못하도록 막는
문제를 만듭니다. // 검토!!

딥링킹은 페이지 재로딩을 하지 않고 URL 앵커(anchor)를 변경함으로서 이를 해결합니다. 그러므로 앱내의 특정 화면에서 링크를 발송 할 수 있도록 가능하게 합니다.


# 서비스(services)

{@link api/ng Services}: 서비스는 컨트롤러 전역으로 접근 가능한 어플리케이션 내의 장수(long lived) 오브젝트 입니다. 유용한 서비스 모음은 Angular와
함께 미리 번들화 되어있습니다. 그러나 당신은 당신만의 서비스를 추가하고 싶을 것입니다. 서비스는 의존 주입(dependency injection)를 이용하여 초기화 됩니다.
이는 초기화의 순서를 해결합니다. 그리고 글로벌 상태(global state)의 위험으로부터 당신을 보호 합니다 (장수 오브젝트를 구현하는 일반적인 방법입니다)


# 외부 리소스(External Resources)

{@link buzz Resources}: 웹 어플리케이션은 데이터 업데이트와 데이터 확보를 위ㅐ서 외부 서비스와 교신을 해야만 합니다. 리소스는 Angular 데이터 바인딩으로
특별히 연결되는 외부 URL의 추상화 입니다.