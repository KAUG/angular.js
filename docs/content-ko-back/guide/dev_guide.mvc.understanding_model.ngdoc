@ngdoc overview
@name Developer Guide: Angular의 MVC: 모델 컴포넌트 이해하기
@description

Angular 문서에서 논의된 문맥에 따르면 _모델_ 은 하나의 엔티티(예를 들어, phones라는 배열을 값으로
가지는 "phones"라고 불리는 모델) 또는 어플리케이션에 대한 전체 데이터 모델(모든 엔티티)을 나타내는
단일 객체를 참조할 수 있다.

Angular에서 모델은 {@link scope 스코프} 객체의 프로퍼티로써 접근 가능한 모든 데이터를 말한다.
프로퍼티의 이름은 모델의 식별자이고 그 값은 (배열이나 원시데이터를 포함한) 어떤 자바스크립트 객체여도 된다. 

Angular에서 모델이 될 수 있는 자바스크립트 객체에 대한 유일한 요건은 그 객체가 해당 스코프 객체의 프로퍼티로
Angular 스코프에 의해 참조되어야 한다는 것이다. 이 프로퍼티의 참조는 명시적 또는 암시적으로 생성할 수 있다.

다음과 같은 방법으로 자바스크립트 객체를 참조하는 스코프 프로퍼티를 명시적으로 생성하여 모델을 만들 수 있다:

* 자바스크립트 코드에서 스코프 객체에 프로퍼티를 직접 할당한다; 이것은 거의 대부분 컨트롤러에서 이루어진다:

         function MyCtrl($scope) {
             // create property 'foo' on the MyCtrl's scope
             // and assign it an initial value 'bar'
             $scope.foo = 'bar';
         }

* 템플릿에 할당 연산자로 {@link expression Angular 표현식} 을 사용한다:

         <button ng-click="{{foos='ball'}}">Click me</button>

* 템플릿에 {@link api/ng.directive:ngInit ngInit 지시자} 를 사용한다. (개인/예제 앱에서는 상관 없지만,
실제 어플리케이션에서는 권장하지 않는다):

         <body ng-init=" foo = 'bar' ">

Angular는 아래의 템플릿 구문을 처리할 때 (스코프 프로퍼티를 생성하고 적절한 값을 할당함으로써)
암시적으로 모델을 생성한다:

* input, select, textarea 그리고 다른 폼 요소들:

         <input ng-model="query" value="fluffy cloud">

   위 코드는 현재 스코프에 "query"라는 모델을 생성하고 "fluffy cloud"라는 값을 설정한다.

* {@link api/ng.directive:ngRepeat ngRepeater} 의 반복자 선언:

         <p ng-repeat="phone in phones"></p>

   위 코드는 "phones"라는 배열의 각 항목별로 하위 스코프를 생성하고 이 각각의 스코프에 "phone" 객체(모델)를
생성한 후 그 값을 배열의 "phone"의 값으로 설정한다.

Angular에서는 다음과 같은 경우에 모델 생성에 실패한다:

* 그 객체를 참조하는 프로퍼티를 포함하는 Angular 스코프가 없는 경우.

* 그 객체를 참조하는 프로퍼티를 포함한 모든 Angular 스코프가 부실하여 가비지 컬렉션(garbage collection)의
대상이 되는 경우.

아래 그림은 간단한 템플릿으로부터 암시적으로 생성된 간단한 데이터 모델을 보여준다:

<img src="img/guide/about_model_final.png">


## 관련 토픽

* {@link dev_guide.mvc Angular의 MVC}
* {@link dev_guide.mvc.understanding_controller 컨트롤러 컴포넌트 이해하기}
* {@link dev_guide.mvc.understanding_view 뷰 컴포넌트 이해하기}
