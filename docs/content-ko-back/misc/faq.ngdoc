@ngdoc overview
@name FAQ
@description

#FAQ

## 질문
## Questions

### 왜 이 프로젝트는 "AngularJS"라고 불리는겁니까? 왜 네임스페이스(namespace)는 "ng"라고 불리나요?

HTML는 Angular(모난) 괄호를 가지고 있고, "ng"발음이 "Angular"와 비슷하기 때문입니다.


### AngularJS는 라이브러리 인가요? 아니면 프레임웍? 플러그인? 아니면 브라우저 익스텐션(browser extension)인가요?

일반적인 프레임웍보다 좀 더 많이 가볍기 때문에, 라이브러리라고 많이들 혼란스러워 하지만, AngularJS는 프레임웍의 정의와 가장 잘 들어맞는다고 하겠습니다.

AngularJS는 100% 자바스크립트이며, 100% 클라이언트 사이드입니다. 또한, 데스크탑과 모바일 브라우저에 모두 호환가능합니다.
따라서, AngularJS는 명확하게 플러그인 또는 다른 어떤 네이티브(native) 브라우저 익스텐션도 아닙니다.


### AngularJS는 템플릿을 만드는 시스템인가요?

최상 레벨(level)에서는, Angular가 단지 또 다른 하나의 템플릿 시스템으로 보이기도 합니다. 하지만, Angular템플릿 시스템이 템플릿이 아닌 중요한 이유가
있습니다. 이는 어플리케이션 개발(application development)에 매우 적합하다는 것입니다: 양방향 데이터 바인딩(bidirectional data binding).
템플릿은 브라우저에서 컴파일 됩니다. 그리고, 컴파일 과정은 라이브뷰(live view)를 만들어냅니다. 당신에게, 개발자로서 주는 의미는, 다른 템플릿 시스템에서와
같이 뷰(vioew)와 모델(model), 모델과 뷰를 연속적으로 동일하게 맞추기 위해서 코딩을 할 필요가 없다는 것입니다.


### AngularJS에서의 보안취약점(security holes)에 대해서 걱정해야 하나요?

다른 어떤 기술들과 마찬가지로, AngularJS는 보안공격에 대해서 완벽하지는 않습니다. 그러나, Angular는 HTML 인젝션 공격(injection attacks)과
크로스사이트 스크립트(cross-site scripting)를 포함한 기초적인 보안취약으로부터 방어할 수 있는 내장 보안 시스템을 제공합니다. AngularJS는 모든 문자열에
대해서 왕복탈출(round-trip escaping)을 하고, 심지어 서버사이드 통신(communication)을 위해서 XSRF방어를 제공합니다.

AngularJS는 Content Security Policy(CSP), HTTPS (SSL/TLS) 그리고 서버사이드 입증, 또한 공격가능한 벡터(vectors)를 상당 수 줄여 줄 수 있는
인증과 같은, 다른 보안 방법들과 호환이 가능하도록 디자인 되었습니다. 그리고 이런 기능들을 사용하시길 강력히 추천하는 바입니다.


### 소스, 빌드를 다운 받을 수 있을까요? 그리고 AngularJS 환경을 로컬에서 호스트 할 수 있을까요?

네. {@link downloading}에서 지시서를 확인해보십시오.


### 어떤 브라우저들이 Angular작업이 가능한가요?

저희는 Safari, Chrome, Firefox, Opera,IE8, IE9 그리고 모바일 브라우져(Android, Chrome Mobile, iOS Safari)와 같은 브라우저를 상대로
광범위한 적합 테스트(test suite)를 실시했습니다.


### Angular성능은 어떻게 되나요?

초기시작(startup)시간은 네트워크 접속상태, 캐쉬(cashe)상태, 사용하는 브라우저, 사용가능한 하드웨어에 따라 상당히 달라집니다. 그러나, 일반적으로
붓스트랩(bootstrap)시간은 십여 밀리세컨(milliseconds) 에서 백여 밀리세컨까지로 측정됩니다.

실시간(runtime)성능은 백엔드(backend)(백엔드로부터 데이터를 가져와야하는 앱의 경우)의 속도와 마찬가지로, 페이지에 사용한 바인딩(bindings)의 숫자와
복잡도에 상당한 영향을 받아 다양하게 변경될 것 입니다. 우리는 예증을 위해서, 대체적으로 백여개에서 천여개의 액티브 바인딩(active bindings)를 사용한 짤막한
앱을 빌드해봅니다.

### 추가(include)해야할 angular.js파일이 얼마나 큰가요?

압축되고, 최소화된 파일 사이즈는 29KB 미만입니다.


### Angular와 함께 오픈소스 Closuer Library를 사용할 수 있나요?

네, {@link http://code.google.com/closure/library Closure Library}에서 Angular 위젯(widgets)를 사용하실 수 있습니다.

### Angular가 jQuery라이브러리를 사용하나요?

네. 어플리케이션이 붓스트랩할 때 앱 안에 라이브러리가 존재한다면 Angular는 {@link http://jquery.com/ jQuery}를 사용할 수 있습니다. 만약 당신의
스크립트 경로(script path)안에 jQuery가 존재하지 않으면 Angular는 우리가 {@link api/angular.element  jQLite}라고 부르는 jQuery 서브셋(subset)
의 구현단을 대비책으로 사용할 것입니다.


### Angular에서의 테스트가능성은 어떤가요?

기초단계부터 테스트가능하도록 디자인 되어있고, 매우 테스트 작업이 가능합니다. 매우 강력하게 독립적인 모의테스트(서버사이드 통신)를 제공하는 통합독립주입 프레임웍
(Integrated dependency injection framework)이 존재 합니다. 제세한 사항은 {@link api/ng service}를 참조하십시오.


### 어떻게하면 Angular에 대해서 조금 더 배울 수 있을까요?

July 17, 2012 talk을 시청하십시오.
"{@link http://www.youtube.com/watch?v=1CpiB3Wk25U AngularJS Intro + Dependency Injection}".


### Angular는 어떤 라이센스입니까?

MIT 라이센스 입니다.

### Angular로고를 다운받고 사용할 수 있습니까?

네! "{@link https://github.com/angular/angular.js/tree/master/images/logo angular.js/images/logo}"아래, 저희 github 레포지토리에서
 디자인 파일을 찾으실 수 있습니다.
그 로고 디자인은 "{@link http://creativecommons.org/licenses/by-sa/3.0/Creative Commons Attribution-ShareAlike 3.0 Unported License}"
라이센스 아래 제공됩니다. 만약 다른 사용처를 염두하신다면, 저희에게 연락주십시오.

### 어떻게 AngularJS 홍보품을 구할 수 있을까요?

저희가 참가하는 행사에는 종종 적은 양의 티셔츠와 스키터를 가지고 갑니다. 당신이 주문을 한다면, 저희 사은품 담당자는 현재 가지고 있는 템플렛을 사용하는 조건으로
 당신을 위해 추가 생산작업을 기쁘게 임할 것입니다. 제작자들은 주문디자인을 파일로 가지고 있을 경우, 별도의 셋업 비용을 받지 않고 당신이 원하는 어떤 수량만큼
  생산해 드릴 수 있습니다.

**스티커**

tom@stickergiant.com로 이메일을 통하여 Tom Witting(또는 다른 영업부 직원)에게 연락하세요, 그리고 job #42711에 있는 것들과 같은 AngularJS
스키터를 주문하고 싶다고 말씀하세요.

그 디자인이 같은 제품이라면 {@link http://www.stickergiant.com StickerGiant}에서 재 주문 할인을 드릴 겁니다.

**티셔츠**
{@link http://www.customink.com www.customink.com}를 통해서 영업부에 연락하세요 그리고 지난번 주문 번호 #2106371와 같이 "angularjs"이라
쓰인 디자인의 티셔츠를 원한다고 말씀하세요. 영수증발행과 배송을 위해 당신의 정보도 전달하셔야 할 것 입니다.

그 디자인이 같은 제품이라면, CustomInk에서는 초기 셋팅 비용을 청구하지 않을 것이고, 재 주문 할인도 드릴 것 입니다.

## 일반적인 함정(Pitfalls)

 Angular 지원채널(Freenode에서의 #angularjs)은 Angular 신규 사용자들이 반복해서 빠지고 있는 많은 함정을 알고 있습니다.
 이 문서는 신규 사용자들이 어려움을 겪지 않도록 하는데 목적을 두고 있습니다.

### DOM 조작(Manipulation)

컨트롤러 안에서 jQuery를 사용하여 DOM을 수정하는 것을 반드시 멈추십시오.
DOM조직은 요소(elements) 추가, 삭제, 내용(contents) 검색, 보이기 & 숨기기를 포함합니다.
DOM 조작을 하기위해서, 내장된 지시자(directives)를 사용하거나, 필요하다면 당신만의 지시자를 작성하십시오.
기능(functionality) 복재에 대한 내용을 아래에서 확인하십시오.

jQuery사용 습관을 버리는데 힘겨워하고 있다면, 당신의 앱(app)에서 jQuery를 없애 버리는 것을 고려해보십시오.
정말로, Angular는 jQuery가 거의 항상 필요 없게 하는 $http 서비스와 강력한 지시자를 가지고 있습니다.
Angular의 배포판 jQLite는 Angular 지시자 작성에, 특히 이벤트 바인딩에 아주 보편적으로 사용할 수 있는 작은 기능들이 있습니다.

### 이미 존재하는 기능 복재하기

당신의 앱(app)이 특정 기능을 필요로 하는 첫 앱(app)이 아닐 확율이 높습니다.
오래된 습관에서 벗어나 특정적으로 재 구현되는 몇몇 Angular가 존재합니다.

**ng-repeat**

'ng-repeat'이 가장 많이 그러한 경우입니다.
사람들은 서버에서부터 받아올 때 몇몇의 컨테이너(container)에 더 많은 엘리먼트(element)를 추가하기 위해서 jQuery(위 참조)를 사용하려 합니다.
아닙니다. 그러지 마세요.
이것을 위해 `ng-repeat`이 있는 것 입니다. 그리고 아주 훌륭히 작동 합니다.
서버에서 온 데이터를 당신의 `$scope`에 있는 배열(array)에 저장하십시오. 그리고 `ng-repeat`를 이용하여 DOM에 이 데이터들을 결속 시키십시오.

**ng-show**

`ng-show`도 자주 사용 됩니다.
다른 앱에서 jQuery를 사용하여 조건에 따라 보여주기도 하고 숨기기도 하는 것은 아주 일반화된 패턴(pattern)입니다. 하지만, Angular는 더 좋은 방법을 가지고
있습니다.
`ng-show`(와 `ng-hide`)는 불리안(boolean)는 표현을 기반으로한 조건에 따라 엘리먼트(elements)를 보이기도 숨기기도 합니다.
`$scope`변수 정의안에 엘리먼트를 보이고, 숨기는 조건들을 기술하십시오:

    <div ng-show="!loggedIn">클릭 <a href="#/login">여기</a> 로그인 하기</div>

또한 반대 개념인 `ng-hide`와 이와 비슷한 `ng-disabled`도 함께 알아두십시오.
특히 몇몇 상호작용하는 `ng-show`전용 패턴을 대신하여 사용할 수 있는 강력한 `ng-switch`가 있다는 것도 염두해 두십시오.

**ng-class**

`ng-class`는 베스트 3개 중 마지막 입니다.
엘리먼트에 클레스(class)를 적용하는 것은 jQuery를 사용하는 또 다른 일반적인 수동 작업입니다.
당연히, Angular는 더 좋은 방법을 가지고 있습니다.
당신은 `ng-class`에 흰 빈칸으로 구분하여 클레스 이름을 부여할 수 있고, 이것들은 일반적인 'class'과 동일시 됩니다.
이건 별로 흥분되진 않습니다. 그래서 두번째 문법이 있습니다:

    <div ng-class="{ errorClass: isError, warningClass: isWarning, okClass: !isError && !isWarning }">...</div>

당신이 `ng-class`에 CSS 클래스이름의 키(keys)와 `$scope`를 이용한 조건적 표현으로 구성된 값(values)으로 이루어진 오브젝트(object)를 부여할 경우,
 엘리먼트는 조건이 모두 '참'인 클래스를 갖게 되고, '거짓'인 조건의 클래스는 갖지 않게 됩니다.

또한, 편리한 ng-class-even` 과 `ng-class-odd`, 그리고 비슷하지만 조금 다른 `ng-style`도 있다는 것을 염두해 두십시오.


### `$watch` 와 `$apply`

Angular의 양방향 데이터 바인딩(data binding)은 모든 Angular의 훌룡하게 하는 근본이 됩니다.
그러나, 이건 마법처럼 모두 완벽하진 않습니다. 그리고 때로는 원하는 대로 구동될 수 있도록 수동 작업을 해야 할 경우가 있습니다.

당신이 Angular에서 `ng-model`, `ng-repeat`그리고 기타 등등을 이용하여 엘리먼트에 값을 결속시키려 할때, Angular는 그 값에 `$watch`를 만듭니다.
그러면 스콥(scope)에서 값이 변경 될 때마다 그 엘리먼트를 바라보는 모든 `$watch`는 구동되며, 모두 업데이트 합니다.

가끔은, 주로 사용자 지시자(custom directive)를 작성할 경우, 변화에 따라 사용자 지시자가 반응할 수 있도록 스콥 값의 `$watch`를 정의해줘야만 합니다.

반면, 가끔 당신이 일부 코드(code)에서 스콥값을 변경해도, 앱이 이에 반응하지 않기도 합니다.
Angular는 당신의 코드 일부가 실행을 마친 이후 스콥 변수의 변화를 확인합니다; 예를 들어, 당신의 스콥에서 `ng-click`이 함수(function)를 호출할 경우,
Angular는 변경사항을 확인한 다음 반응 합니다.
그러나, 일부 코드는 Angular 영역 밖에 존재하며, 업데이트를 진행시키기 위해서 스스로 `scope.$apply()`를 호출 해야만합니다.
이런 현상은 사용자 지시자에서의 이벤트 핸들러(event handlers)에서 아주 일반적으로 볼 수 있습니다.

### `ng-repeat` 와 다른 지시자와 결합시키기

`ng-repeat`는 아주 유용합니다, Angular에서 가장 강력한 지시자중에 하나 입니다.
그러나, 변환(transformation)을 DOM에 적용하는 것 또한 충분 합니다.
그래서 다른 지시자(예를 들어  `ng-show`, `ng-controller`, 그리고 다른 것들)을 `ng-repeat`와 같은 엘리먼트에 적용하 일반적으로 문제를 일으킵니다.

만약 모든 반복(repeat)에 지시자를 적용하고 싶다면, 부모 엘리먼트안의 반복(repeat)을 감싸서, 지시자 안에 넣으십시오.
만약 반복(repeat)에 각각의 지시자를 적용하고 싶다면, `ng-repeat`와 함께 자식 엘리먼트속에 넣으십시오.

### `$rootScope`가 존지합니다. 그러나 이를 사용하면 위험합니다.

Angular에서의 스콥(scopes)은 트리의 최상에 있는 루트 스콥(root scope)으로부터 원형적으로(prototypical) 상속받은 구조를 형성합니다.
거의 모든 뷰(views)는 컨트롤러(controller)를 가지고 있으며, 스콥은 스콥만의 컨트롤러를 가지고 있기 때문에, 대부분 무시될 수 있습니다.

아주 간헐적으로 전체 앱에서 접근 가능하도록 일부 데이터를 글로벌로 만들고 싶다고 합시다.
그런경우 `$rootScope`에 주입시키고, 다른 일반 스콥처럼 그 데이터에 값을 셋팅하십시오.
이 스콥들은 루트스콥에서 상속받았기 때문에, 마치 로컬 스콥의 값을 다루듯이 `ng-show`와 같은 지시자에 추가한 표현들이 접근할 수 있게 될 것 입니다.

물론, 글로벌 상태는 좋지 않고, 사용을 삼가해야 합니다. 다른 언어에서의 글로벌 변수를 사용하지 않는 것과 같을 것입니다(그러길 희망합니다).
특별히, 글로벌 상태를 코드를 위해서 사용하지 마시고, 오로지 데이터를 위해서 사용하십시오.
만약 $rootScope`에 함수를 넣기를 시도 한다면, 필요한 곳에 주입시킬 수 있는 서비스에 함수를 넣는 것이 거의 항상 더 좋습니다. 그리고 테스트하기도 쉽습니다.

반대로 얘기하면, 적은 데이터를 저장하고 반환하는 단일 목적으로 존재하는 서비스는 만들지 마십시오.